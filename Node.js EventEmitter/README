Node.js EventEmitter
Node.js所有的异步I/O操作在完成时都会发送一个事件到事件队列
Node.js里面的许多对象都会分发事件;一个net.Server对象会在每次有新连接时分发一个事件，一个fs.readStream对象会在文件被打开的时候发出一个事件，所有这些产生事件的对象都是events.EventEmitter的实例。

EventEmitter类
events模块只提供了一个对象:events.EventEmitter;EventEmitter的核心就是事件触发或事件监听器功能的封装；
可以通过require('events')来访问该模块
var events = require('events');
var eventEmitter = new events.EventEmitter();

EventEmitter对象如果在实例化时发生错误,会触发error事件,当添加新的监听器时,newListener事件会触发,当监听器被移除时,removeListener事件被触发

//event.js
var EventEmitter = require('events').EventEmiiter;
var event = new EventEmitter();
event.on('some_event',function(){
	console.log('some_event 事件触发');
})
setTimeout(function(){
	event.emit('some_event');
},1000)


EventEmitter的每个事件由一个事件名和若干个参数组成,事件名是一个字符串,
EventEmitter支持若干个事件监听器
当事件触发时,注册到这个事件的事件监听器被依次调用,事件参数作为回调函数参数传递

var events = require('events');
var emitter = new events.EventEmitter();
emitter.on('someEvent',function(arg1,agr2){
	console.log('listener1',arg1,arg2);
})
emitter.on('someEvent',function(arg1,arg2){
	console.log('listener2',arg1,arg2);
})
emitter.emit('someEvent','arg1参数','arg2参数')