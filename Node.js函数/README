Node.js函数
在JavaScript中,一个函数可以作为另一个函数的参数,我们可以先定义一个函数,然后传递,也可以在传递参数的地方直接定义函数.
在Node.js中函数的使用与javascript类似；
function say(word){
	console.log(word);
}
function execute(someFunction,value){
	someFunction(value);
}
execute(say,'Hello');

以上代码中,我们把say函数作为execute函数的第一个变量进行传递,这里返回的不是say的返回值,而是say本身！这样一来,say就变成了execute中的本地变量someFunction,execute可以通过调用someFunction()(带括号的形式)来使用say函数。
当然,因为say有一个变量,execute在调用someFunction时可以传递这样一个变量


匿名函数
我们可以把一个函数作为变量传递,我们可以不使用‘先定义,再传递’的方法,我们可以直接在另一个函数的括号中定义和传递这个函数
先定义,后传递;
function execute(someFunction,value){
	someFunction(value);
}
execute(function(value){console.log(value)},"Hello");


函数传递是如何让HTTP服务器工作的
var http = require('http');
http.createServer(funciton(request,response{
	response.writeHead(200,{'Content-type':'text/plain'});
	response.write('Hello World');
	response.end();
}).listen(8081);
在这里我们给createServer传递了一个匿名函数;

同样的,我们还可以这样写
var http = require('http');
function onResqust(request,response){
	response.writeHead(200,{"Content-Type":"text/plain"});
	response.write('Hello World');
	response.end();
}
http.createServer(onResqust).listen(8081);